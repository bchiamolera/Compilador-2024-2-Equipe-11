package compilador.analisador;

public interface ParserConstants
{
    int START_SYMBOL = 36;

    int FIRST_NON_TERMINAL    = 36;
    int FIRST_SEMANTIC_ACTION = 70;

    int[][] PARSER_TABLE =
    {
        { -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1,  2,  3, -1, -1, -1, -1,  3,  3,  3,  3, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  5, -1, -1, -1, -1,  5,  5,  5,  5, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6,  7, -1, -1 },
        { -1, -1, -1, -1, 13, -1, -1, -1, -1, 11, 12, 12, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10,  9,  9, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 39, 39, -1, -1, -1, -1, -1, -1, 39, 39, 39, 39, -1, -1, 39, -1, -1, -1, -1, 39, 39, -1, -1, -1, -1, -1, 39, -1 },
        { -1, -1, -1, -1, 40, -1, -1, -1, -1, 40, 40, 40, 40, -1, -1, 40, -1, -1, -1, 41, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, -1, -1, 40 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 17 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, -1, -1, 23, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, 23, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 24 },
        { -1, -1, -1, 32, -1, 33, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 34, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 45, 44, -1, -1, -1, -1, -1, -1, 43, 43, 43, 43, -1, -1, 46, -1, -1, -1, -1, 43, 43, -1, -1, -1, -1, -1, 43, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, 47, -1 },
        { -1, -1, -1, -1, 48, -1, -1, -1, -1, 48, 48, 48, 48, -1, -1, 48, -1, -1, -1, 48, 48, -1, 49, 49, 49, 49, -1, -1, -1, -1, 48, 48, -1, -1, 48 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 51, 52, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, 54, 54, -1, -1, -1, -1, -1, 54, -1 },
        { -1, -1, -1, -1, 55, -1, -1, -1, -1, 55, 55, 55, 55, -1, -1, 55, -1, -1, -1, 55, 55, -1, 55, 55, 55, 55, 56, 57, -1, -1, 55, 55, -1, -1, 55 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, 58, 58, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, -1, -1, -1, 58, -1 },
        { -1, -1, -1, -1, 59, -1, -1, -1, -1, 59, 59, 59, 59, -1, -1, 59, -1, -1, -1, 59, 59, -1, 59, 59, 59, 59, 59, 59, 60, 61, 59, 59, -1, -1, 59 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 63, 64, 65, -1, -1, -1, -1, -1, -1, -1, 67, 68, -1, -1, -1, -1, -1, 66, -1 },
        { -1, -1, -1, -1, 28, -1, -1, -1, -1, 28, 28, 28, 28, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 30, 31, 30, 30, -1, -1, 31, 31, 31, 31, 30, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 170,   3,  37,   4, 171 },
        {  39,  32,  38 },
        {   0 },
        {  37 },
        {  42,  40 },
        {  41 },
        { 172 },
        {  33,  50, 173 },
        {  16, 174,  43 },
        {   0 },
        {  31,  42 },
        {  45 },
        {  46 },
        {  47 },
        {  48 },
        {  10,  34,  52,  35 },
        {  54,  16, 175,  53 },
        {   0 },
        {  31,  52 },
        {   0 },
        {  19, 176,  31 },
        {  11,  34,  55,  35 },
        {  12,  34,  55,  35, 177 },
        {  50, 178,  56 },
        {   0 },
        {  31,  55 },
        {   5,  50, 179,  68,  57, 180,  58, 181,   4 },
        {  42,  33,  50, 173 },
        {  41,  32,  69 },
        {  44,  32,  69 },
        {   0 },
        {  68 },
        {   0 },
        { 180,   6,  50, 182,  68,  57 },
        {   0 },
        {   7,  68 },
        { 183,  13,  68,  49 },
        {  15,  50, 184 },
        {  14,  50, 185 },
        {  59,  51 },
        {   0 },
        {  20,  59, 186,  51 },
        {  21,  59, 187,  51 },
        {  60 },
        {   9, 188 },
        {   8, 189 },
        {  22,  59, 190 },
        {  63,  61 },
        {   0 },
        {  62, 191,  63, 192 },
        {  23 },
        {  24 },
        {  25 },
        {  26 },
        {  65,  64 },
        {   0 },
        {  27,  65, 193,  64 },
        {  28,  65, 194,  64 },
        {  67,  66 },
        {   0 },
        {  29,  67, 195,  66 },
        {  30,  67, 196,  66 },
        {  16, 197 },
        {  17, 198 },
        {  18, 199 },
        {  19, 200 },
        {  34,  50,  35 },
        {  27,  67 },
        {  28,  67, 201 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado EOF",
        "esperado palavra_reservada",
        "esperado main",
        "esperado end",
        "esperado if",
        "esperado elif",
        "esperado else",
        "esperado false",
        "esperado true",
        "esperado read",
        "esperado write",
        "esperado writeln",
        "esperado repeat",
        "esperado until",
        "esperado while",
        "esperado identificador",
        "esperado constante_int",
        "esperado constante_float",
        "esperado constante_string",
        "esperado &&",
        "esperado ||",
        "esperado !",
        "esperado ==",
        "esperado !=",
        "esperado <",
        "esperado >",
        "esperado +",
        "esperado -",
        "esperado *",
        "esperado /",
        "esperado ,",
        "esperado ;",
        "esperado =",
        "esperado (",
        "esperado )",
        "esperado main", // <fg_programa> inv?lido",
        "esperado if read write writeln repeat id", // <lista_de_instrucoes> inv?lido",
        "esperado end if read write writeln repeat id", // <lista_de_instrucoes1> inv?lido",
        "esperado if read write writeln repeat id", // <instrucao> inv?lido",
        "esperado ; =",                                      // <instrucao1> inv?lido",
        "esperado if read write writeln repeat", // <comando> inv?lido",
        "esperado id", // <lista_de_identificadores> inv?lido",
        "esperado , ; =", //<lista_de_identificadores1> inv?lido",
        "esperado id", //<cd_atribuicao> inv?lido",
        "esperado read", //<cd_entrada> inv?lido",
        "esperado write writeln", //<cd_saida> inv?lido",
        "esperado if", //<cd_selecao> inv?lido",
        "esperado repeat", //<cd_repeticao> inv?lido",
        "esperado until while", //<cd_repeticao1> inv?lido",
        "esperado expressao", // <expressao> inv?lido",
        "esperado expressao", // <expressao1> inv?lido",
        "esperado id constante_string", //<lista_de_entrada> inv?lido",
        "esperado , )", //<lista_de_entrada1> inv?lido",
        "esperado id constante_string", //<opcional> inv?lido",
        "esperado expressao", // <lista_de_expressao> inv?lido",
        "esperado , )", // <lista_de_expressao1> inv?lido",
        "esperado end elif else", //<elif> inv?lido",
        "esperado end else", //<else> inv?lido",
        "esperado expressao", // <elemento> inv?lido",
        "esperado expressao", // <relacional> inv?lido",
        "esperado expressao", // <relacional1> inv?lido",
        "esperado == != < >", //<operador_relacional> inv?lido",
        "esperado expressao", // <aritmetica> inv?lido",
        "esperado expressao", // <aritmetica1> inv?lido",
        "esperado expressao", // <termo> inv?lido",
        "esperado expressao", // <termo1> inv?lido",
        "esperado expressao", // <fator> inv?lido",
        "esperado if read write writeln repeat id", //<lista_de_comandos> inv?lido",
        "esperado end if elif else read write writeln repeat until while id", //
    };
}
